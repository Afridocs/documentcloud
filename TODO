TODO:

  * Remove image sizes from canonical JSON.
    
  * Authorize logged-in folks to view private and organization documents.
    
  * Figure out the access control policies for all assets on S3. Public ones we
    can load directly from the client, probably.

  * Hook the upload progress widget into an Nginx upload progress module --
    switch to passenger nginx in development.

  * Show if the currently-selected documents are tagged with the labels in
    the labels pulldown. Add autocomplete and label creation to the pulldown.
                
  * Figure out our own taxonomy and map all the OpenCalais categories into it.
    

DONE:

  * Start work on the Public API.

  * Figure out what belongs in the Accounts sidebar.

  * Replace document IDs in URLs with title-based slugs.

  * Figure out what's going on with the file upload size limit -- an EC2 thing?
    Maybe firebug will help?

  * Think about adding search history.

  * Start on a preliminary document-relation visualization.

  * Swap out our single Thin instance on staging for a Passenger setup --
    the advantage of the single instance is that deadlocks become obvious, so be
    watch out for them after the switch.

  * Integrate the new document format / DocViewer. Start using the document 
    package format for imports. Replace raw PDF link with a DocumentViewer.

  * Think about modeling journalist-provided attributes in the same
    way as the rest of the metadata we're gathering. Our metadata system
    should be able to handle things like title, author, news_org,
    published_date, provenance, etc. (Nope -- then we'd have to join.)

  * We need an upload progress widget.

  * Begin storing the complete image and page assets.

  * Think about caching all metadata for a document in a single JSON file on S3.
    (Thought about it -- now that they're in the same DB, there's not as much 
    to gain.)

  * Create a UI for making and managing collections (labels?) of documents.

  * Refactor searchbox and label document list rendering -- it's getting messy.

  * EMPTY RESULTS FOR PORTIONS OF A SEARCH NEED TO KILL THE SEARCH, pronto.

  * Pull all docs from http://www.aclu.org/accountability/released into staging.

  * Badge the not-yet-password'd accounts with some icon.

  * Look into all the weightings and filterings that Sphinx has to offer,
    take advantage.

  * Pervasive P-A-G-I-N-A-T-I-O-N

  * Fix up Sphinx search to use delta indexes (and sharded indexes, perhaps), 
    so that all new documents imported within, say, a five-minute period 
    go delta. To get really fancy, the delta interval can be a constant 
    multiplier of the amount of time it takes to run a full index.

  * Think about a unified faceted search through Solr.

  * Pull all docs from http://projects.nytimes.com/guantanamo into staging.

  * Create a News Organization "Manage Journalists" page. (The Accounts tab)

  * Make a flexible JS class for tabbed page sections.

  * Make a distinction between private and public documents. (Uh oh, getting that
    into the metadata store is going to be a little tricky.) Full on access 
    control -- at least 'private', 'organization', 'exclusive', 'public', but 
    maybe per-user. Add organization_id and account_id.

  * Update fielded search to use Tokyo Table intersection of queries.

  * It looks like we're going to be sticking with the current meta/entry split,
    so try to streamline search and metadata retrieval.

  * Rename EntityStore => 'organization' to 'source'.

  * Give MongoDB a spin for everything but full-text search. (Tried it, we have
    a Mongo branch with a pretty complete implementation -- unfortunately, the
    querying isn't flexible enough yet to satisfy our search requirements.)

  * Add document titles and sources to the searchable metadata.

  * Think about building a real full text search query parser that can be 
    translated into Sphinx extended2 syntax (or alternatively, just documenting
    Sphinx's syntax itself).

  * Create a News Organization "Signup" page.

  * Add a TODO page to the wiki.

  * Figure out how controllers are going to work -- refactor javascripts/app/
    workspace.js accordingly.

  * Roll our own asset packaging that handles CSS as well as Javascript, along
    the lines of what we're doing with JST right now. Axe Sprockets.

  * Add a link to view the document plain text.

  * Look into Linux (or OpenCalais) automatic summary tools for the summary
    (nothing seems good enough).

  * Get Tesseract hooked up again as OCR.

  * Provide a way of deleting documents, at least temporarily, so that we can
    we-import mistyped ones, and remove garbage docs.

  * Implement client-side restful sets as a basic way to interact.

  * Replace Tokyo Dystopia with a better full text search solution.

  * Swap params#q search query for a hashtag-based one.

  * Access control. Lockdown.

  * Create an "Upload Document" UI within the journo workspace.

  * Enhance the Journalist Workspace with journo-specific bits -- figure out 
    the separation of their search from the common man's search.

  * Create a deploy rake task that updates both 'staging-central' and 
    'staging-workers', restarts cloud-crowd and document-cloud.

