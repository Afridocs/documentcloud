TODO:
    
  * Build out surrounding start page blips... About Us, How to Join, 
    What is This?
      
  * Create a News Organization "Manage Journalists" page.
  
  * Replace raw PDF link with a DocumentViewer.
    
  * Fix up Sphinx search to use delta indexes (and sharded indexes, perhaps), 
    so that all new documents imported within, say, a five-minute period 
    go delta. To get really fancy, the delta interval can be a constant 
    multiplier of the amount of time it takes to run a full index.
    
  * Look into all the weightings and filterings that Sphinx has to offer,
    take advantage.
        
  * Replace document IDs in URLs with title-based slugs.
  
  * Pervasive P-A-G-I-N-A-T-I-O-N
  
  * Start work on the Public API.
  
  * Swap out our single Thin instance on staging for a Passenger setup --
    the advantage of the single instance is that deadlocks become obvious, so be
    watch out for them after the switch.
    
  * Figure out our own taxonomy and map all the OpenCalais categories into it.
  
  * Start on a preliminary document-relation visualization.
  
  * Create a UI for making and managing collections (folders?) of documents.
    
  * We need an upload progress widget.
  
  * Authorize logged-in folks to view private and organization documents.
  
  * Make a flexible JS class for tabbed page sections.


DONE:

  * Make a distinction between private and public documents. (Uh oh, getting that
    into the metadata store is going to be a little tricky.) Full on access 
    control -- at least 'private', 'organization', 'exclusive', 'public', but 
    maybe per-user. Add organization_id and account_id.

  * Update fielded search to use Tokyo Table intersection of queries.

  * It looks like we're going to be sticking with the current meta/entry split,
    so try to streamline search and metadata retrieval.

  * Rename EntityStore => 'organization' to 'source'.

  * Give MongoDB a spin for everything but full-text search. (Tried it, we have
    a Mongo branch with a pretty complete implementation -- unfortunately, the
    querying isn't flexible enough yet to satisfy our search requirements.)

  * Add document titles and sources to the searchable metadata.

  * Think about building a real full text search query parser that can be 
    translated into Sphinx extended2 syntax (or alternatively, just documenting
    Sphinx's syntax itself).

  * Create a News Organization "Signup" page.

  * Add a TODO page to the wiki.

  * Figure out how controllers are going to work -- refactor javascripts/app/
    workspace.js accordingly.

  * Roll our own asset packaging that handles CSS as well as Javascript, along
    the lines of what we're doing with JST right now. Axe Sprockets.

  * Add a link to view the document plain text.

  * Look into Linux (or OpenCalais) automatic summary tools for the summary
    (nothing seems good enough).

  * Get Tesseract hooked up again as OCR.

  * Provide a way of deleting documents, at least temporarily, so that we can
    we-import mistyped ones, and remove garbage docs.

  * Implement client-side restful sets as a basic way to interact.

  * Replace Tokyo Dystopia with a better full text search solution.

  * Swap params#q search query for a hashtag-based one.

  * Access control. Lockdown.

  * Create an "Upload Document" UI within the journo workspace.

  * Enhance the Journalist Workspace with journo-specific bits -- figure out 
    the separation of their search from the common man's search.

  * Create a deploy rake task that updates both 'staging-central' and 
    'staging-workers', restarts cloud-crowd and document-cloud.

