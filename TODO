TODO:
    
  * Build an metadata -> document dialog, where you have: the ability to add
    the entity to the current search, the ability to delete the entity if you're
    the owner?, a listing of the pages where the entity occurs, with jump links.
                    
  * Change embedded viewers to be hosted on S3, and perhaps iframed, for text
    viewing.
      
  * Implement the "publication" workflow. A document should know if it's been
    published, and the URL where. Create a cron/cloudcrowd job that pings each
    published document, ensuring that it's not 404'd.

  * Show if the currently-selected documents are tagged with the labels in
    the labels pulldown. Make 'em removable.
    
  * Write out full documentation, with screenshots.
  
  * Real deploys -- Vlad?
  

AFTER BETA:

  * Make search degrade gracefully in the viewer, when DocumentCloud is down.

  * Add EPUB-formatted downloads of the documents? Make the reader able to load
    EPUB?

  * Add a "related documents" search. We need a good algorithm for this.

  * Implement http://nlp.stanford.edu/software/CRF-NER.shtml, alongside Calais.
    Or, perhaps, AlchemyAPI.
  
  * Flesh out a more comprehensive API.
  
  * Settle the linked data representation of a document with the semantic web
    folks.
      
  * Add lightweight tags for documents and notes (anything searchable).
  
  * Add an admin UI for editing static pages.
  
  * Think about searches over just notes -- is it necessary?
  
  * Think about making search like the Guantanamo docket: http://bit.ly/5UmDty
    Adding a "search pages" feature.
    
  * Add more supporting features to Projects -- they should know statistics 
    about the documents, notes and entities contained within. Taggable?
  

DONE: 

  * Build out the entity view.
  
  * Make notes editable within the workspace.

  * Give all S3 images far-futures expires headers, and content-types?

  * Come up with something reasonable to have on the home screen.

  * Add the summary as a field prior to upload. Put back a dialog to edit the
    summary, or have it in the viewer.

  * Revisit the in-viewer-editing UI. Firm it up cross-browser.
  
  * Add a JS NoteView for showing notes (with images) within the workspace.

  * Add an "invisible" access level for takedowns.

  * Do the cross-browser hurly-burly runaround.

  * Make some pretty 404/500/403 pages.
  
  * Make a method for editing and deleting projects.

  * Take a stance one way or the other on foreign keys -- anecdotal evidence
    puts their insertion time at 7X greater, so let's turn them off.

  * Switch up projects to use a real join table.

  * Add OpenCalais logo to comply with TOS.

  * Restructure client-side navigation -- no tabs, no breadcrumbs.
    Bring entities and analysis in line. Flesh out the faux-URLs.

  * Add page counts to the document tiles.

  * Default to private.

  * Remove the "V1" namespace.

  * Upgrade the Admin UI to a dialog.

  * Drag and drop documents into projects.

  * Create a new paginator.

  * Kill the metadata sidebar for searches, and create an organization one
    to go there instead.

  * Rework dc.View setCallbacks syntax.

  * Kill bookmarks.
  
  * The design.
  
  * Cleanup and make typography and spacing real consistent. 
    Perhaps a style guide. Perhaps a grid.
  
  * Start extracting dates (not times) -- integrate the DateExtractor into
    document import. What to do about relevance? Make sure to record occurrences
    and merge identical dates.

  * Upgrade to OpenCalais 4.3

  * Change "Labels" to "Projects"

  * Start creating thumbnails of every page.

  * Merge in latest Aristo CSS.

  * Figure out a reasonable way to do phrase-based searches.
  
  * Ask postgres guys about index bloat, phrase search.
  
  * Think about somehow getting hold of the page numbers on which each piece
    of metadata occurs, both Metadatum and MetadataDate (we could do this by
    reading in all of the pages into memory, looking at the page lengths,
    and making a map) -- then, provide links directly from the workspace to the
    page where the entity or date occurs.

  * Add dates with a special faux-metadata table (date columns, not strings).
    Migrate all existing documents to store their dates.

  * Figure out our own taxonomy and map all the OpenCalais categories into it.

  * Get a real production server setup, and start deploying there as well.
  
  * Add appropriate indexes for documents and metadata.

  * Switch to real migrations. Redo FTI. 

  * Added provisioning notes, for everything you need to do to provision
    a new server.

  * Added full text search columns on Documents (maybe they should be on 
    the full_text table instead) for title and source. Title is now searched
    alongside text.

  * Add ts_vector columns to full_text and pages -- index those instead of the
    direct text. Add triggers (or callbacks) to keep them up-to-date.

  * Start access controlling assets on S3. This includes changing permissions
    in bulk, as well as serving different URLs for public and private assets
    all private assets are going to have to be served through authentication
    within Rails.

  * Start access-controlling S3 assets -- this means saving them private
    and implementing Document#set_access with RightAWS#put with no body 
    (nope, it's a copy with identical headers). Add it to the UI as a pulldown.

  * Fix page text editing -- either by writing a custom jQuery.text method
    that handles the browser differences between different contentEditables,
    or by just using a pre tag.

  * Edit page text.

  * Build an in-viewer annotation and section editing UI.
    * Add and edit annotation (private if logged-in, public if owner).
    * Add sections if owner.

  * In-viewer bookmarking.

  * Create, and start using, a dc.ui.Dialog instead of alert() and friends.

  * Add the ability to edit a document's summary.

  * Split label filtering and adding into two fields.

  * Add saved bookmarks to specific pages of documents.

  * My Documents!!!

  * Add fleshed-out section and annotation models.

  * Fix Postgres Unicode input: "invalid byte sequence for encoding"

  * Show in-progress uploads even after a page refresh.

  * Authorize logged-in folks to view private and organization documents.

  * Go through and fix the logged-out search UI.

  * Switch to Passenger Nginx in development.
  
  * Remove image sizes from canonical JSON.

  * Start work on the Public API.

  * Figure out what belongs in the Accounts sidebar.

  * Replace document IDs in URLs with title-based slugs.

  * Figure out what's going on with the file upload size limit -- an EC2 thing?
    Maybe firebug will help?

  * Think about adding search history.

  * Start on a preliminary document-relation visualization.

  * Swap out our single Thin instance on staging for a Passenger setup --
    the advantage of the single instance is that deadlocks become obvious, so be
    watch out for them after the switch.

  * Integrate the new document format / DocViewer. Start using the document 
    package format for imports. Replace raw PDF link with a DocumentViewer.

  * Think about modeling journalist-provided attributes in the same
    way as the rest of the metadata we're gathering. Our metadata system
    should be able to handle things like title, author, news_org,
    published_date, provenance, etc. (Nope -- then we'd have to join.)

  * We need an upload progress widget.

  * Begin storing the complete image and page assets.

  * Think about caching all metadata for a document in a single JSON file on S3.
    (Thought about it -- now that they're in the same DB, there's not as much 
    to gain.)

  * Create a UI for making and managing collections (labels?) of documents.

  * Refactor searchbox and label document list rendering -- it's getting messy.

  * EMPTY RESULTS FOR PORTIONS OF A SEARCH NEED TO KILL THE SEARCH, pronto.

  * Pull all docs from http://www.aclu.org/accountability/released into staging.

  * Badge the not-yet-password'd accounts with some icon.

  * Look into all the weightings and filterings that Sphinx has to offer,
    take advantage.

  * Pervasive P-A-G-I-N-A-T-I-O-N

  * Fix up Sphinx search to use delta indexes (and sharded indexes, perhaps), 
    so that all new documents imported within, say, a five-minute period 
    go delta. To get really fancy, the delta interval can be a constant 
    multiplier of the amount of time it takes to run a full index.

  * Think about a unified faceted search through Solr.

  * Pull all docs from http://projects.nytimes.com/guantanamo into staging.

  * Create a News Organization "Manage Journalists" page. (The Accounts tab)

  * Make a flexible JS class for tabbed page sections.

  * Make a distinction between private and public documents. (Uh oh, getting that
    into the metadata store is going to be a little tricky.) Full on access 
    control -- at least 'private', 'organization', 'exclusive', 'public', but 
    maybe per-user. Add organization_id and account_id.

  * Update fielded search to use Tokyo Table intersection of queries.

  * It looks like we're going to be sticking with the current meta/entry split,
    so try to streamline search and metadata retrieval.

  * Rename EntityStore => 'organization' to 'source'.

  * Give MongoDB a spin for everything but full-text search. (Tried it, we have
    a Mongo branch with a pretty complete implementation -- unfortunately, the
    querying isn't flexible enough yet to satisfy our search requirements.)

  * Add document titles and sources to the searchable metadata.

  * Think about building a real full text search query parser that can be 
    translated into Sphinx extended2 syntax (or alternatively, just documenting
    Sphinx's syntax itself).

  * Create a News Organization "Signup" page.

  * Add a TODO page to the wiki.

  * Figure out how controllers are going to work -- refactor javascripts/app/
    workspace.js accordingly.

  * Roll our own asset packaging that handles CSS as well as Javascript, along
    the lines of what we're doing with JST right now. Axe Sprockets.

  * Add a link to view the document plain text.

  * Look into Linux (or OpenCalais) automatic summary tools for the summary
    (nothing seems good enough).

  * Get Tesseract hooked up again as OCR.

  * Provide a way of deleting documents, at least temporarily, so that we can
    we-import mistyped ones, and remove garbage docs.

  * Implement client-side restful sets as a basic way to interact.

  * Replace Tokyo Dystopia with a better full text search solution.

  * Swap params#q search query for a hashtag-based one.

  * Access control. Lockdown.

  * Create an "Upload Document" UI within the journo workspace.

  * Enhance the Journalist Workspace with journo-specific bits -- figure out 
    the separation of their search from the common man's search.

  * Create a deploy rake task that updates both 'staging-central' and 
    'staging-workers', restarts cloud-crowd and document-cloud.

